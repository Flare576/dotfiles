#!/bin/bash
issueFile="${HOME}/.jira.d/.jira.issue"
echo "ISSUE_FILE: ${issueFile}"
issue=$(head -n 1 $issueFile)
echo "issue: ${issue}"

echo "endpoint: https://${JIRA_S_ENDPOINT}"
echo "project: ${JIRA_S_PROJECT}"
echo "login: ${JIRA_S_LOGIN}"
echo "user: ${JIRA_S_USER}"
echo "API_TOKEN: ${JIRA_API_TOKEN}"
echo "PREFIX: ${JIRA_S_PREFIX}"
if [ -n "$(command -v bat)" ] ; then 
  viewer="bat"
else
  viewer="cat"
fi

cat<<END
custom-commands:
  - name: workon
    aliases: ['w']
    help: Sets the global "worked on" issue.
    args:
      - name: ISSUE
    options:
      - name: remove
        short: r
        type: BOOL
        help: Remove the current issue number
    script: |-
      {{if options.remove}}
      tail -n +2 "\${JIRA_ISSUE_FILE}" > /tmp/jiratemp && mv /tmp/jiratemp "\${JIRA_ISSUE_FILE}"
      {{else if not args.ISSUE}}
      echo "Must provide a Issue"
      {{else}}
      echo "{{args.ISSUE}}" | cat - "\${JIRA_ISSUE_FILE}" > /tmp/jiratemp && mv /tmp/jiratemp "\${JIRA_ISSUE_FILE}"
      {{end}}
  - name: i
    help: Displays the global "worked on" issues
    script: head "\${JIRA_ISSUE_FILE}"
  - name: git
    help: Creates a new Git branch with the Jira prefix/issue and, if provided, name
    args:
      - name: NAME
    script: |-
      git checkout -b \${JIRA_PREFIX}/\${JIRA_ISSUE}{{if args.NAME}}-{{args.NAME}}{{end}}
# FIND WORK
  - name: mine
    help: Display issues assigned to me
    args:
      - name: PROJECT
        default: \$JIRA_PROJECT
    script: |-
      {{jira}} list -t ISuStRA --query "resolution = unresolved and assignee=currentuser() ORDER BY created"
  - name: sprint
    aliases: ['s']
    help: Shows stories in curent sprint
    args:
      - name: PROJECT
        help: Filter on a Project, defaults to \$JIRA_PROJECT
        default: \$JIRA_PROJECT
    options:
      - name: text
        short: t
        help: Search the text of the ticket for this value
      - name: all
        short: a
        type: BOOL
        help: Include Done, Dead, and Sign Off stories
    script: |-
      {{jira}} list -t ISuStRA --query "sprint IN openSprints(){{if not options.all}} and status NOT IN (\"Done\",\"Dead\",\"Sign Off\"){{end}} and project={{args.PROJECT}}{{if options.text}} and text ~ \"{{options.text}}\"{{end}} ORDER BY status,assignee" -f "key,status,assignee,customfield_19392,summary"
  - name: link
    help: Puts the link for JIRA_ISSUE in your clipboard if no ISSUE is provided
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      printf "https://${JIRA_S_ENDPOINT}/browse/{{args.ISSUE}}" | pbcopy
  - name: browser
    help: Brings the JIRA_ISSUE up in the browser if no ISSUE is provided
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      {{jira}} view -b {{args.ISSUE}}
  - name: v
    help: Views current JIRA_ISSUE if no ISSUE is provided
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      {{jira}} view -t customView {{args.ISSUE}} | $viewer
# DO WORK
  - name: g
    help: Actually takes the story
    args: 
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      {{jira}} assign {{args.ISSUE}} \$JIRA_USER
      {{jira}} trans "In Progress" {{args.ISSUE}}
  - name: u
    help: Marks story as unassigned and puts it back into ToDo
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      {{jira}} unassign {{args.ISSUE}}
      {{jira}} trans "To Do" {{args.ISSUE}}
  - name: qa
    help: Assigns the story to you, moves it to QA, and brings up details
    args: 
       - name: ISSUE
         default: \$JIRA_ISSUE
    options:
      - name: review
        short: r
        help: Also run the 'qa' template
        type: BOOL
    script: |
      {{if options.review}}
      {{jira}} edit -t qa {{args.ISSUE}}
      {{end}}
      {{jira}} trans "QA" {{args.ISSUE}}
      {{jira}} v {{args.ISSUE}} | vi -
  - name: cr
    help: Clears "reviewer" field
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      {{jira}} edit -t qa_clear {{args.ISSUE}}
  - name: r
    help: Open a comment with the template then move to signoff
    args:
      - name: STATUS
        default: "Sign Off"
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      {{jira}} comment -m "h1. Testing Session

      h2. Acceptance Criteria

      h2. Edge Case

      h2. Regression Testing
        * Existing:
        * New:

      h2. Look and Feel" {{args.ISSUE}}
      {{jira}} trans "{{args.STATUS}}" {{args.ISSUE}}
  - name: e
    help: Edits current JIRA_ISSUE if no ISSUE is provided
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      {{jira}} edit {{args.ISSUE}}
  - name: c
    help: Comments on current JIRA_ISSUE if no ISSUE is provided
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    options:
      - name: comment
        short: m
    script: |
      {{jira}} comment{{if options.comment}} -m "{{options.comment}}"{{end}} {{args.ISSUE}}
  - name: ts
    help: Lists the TransitionS for the JIRA_ISSUE if no ISSUE is provied
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      {{jira}} transitions {{args.ISSUE}}
  - name: t
    help: Transitions the current JIRA_ISSUE if no ISSUE is provided
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    options:
      - name: state
        short: s
        required: true
      - name: comment
        short: m
    script: |
      {{jira}} trans{{if options.comment}} -m "{{options.comment}}"{{end}} "{{options.state}}" {{args.ISSUE}}
  - name: p
    help: Moves story to "PR Review"
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      {{jira}} trans "PR Review" {{args.ISSUE}}
  - name: d
    help: Moves story to "Ready for QA" or provided state
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    options:
      - name: comment
        short: m
      - name: state
        short: s
        default: "QA"
    script: |
      {{jira}} trans{{if options.comment}} -m "{{options.comment}}"{{end}} "{{options.state}}" {{args.ISSUE}}
# HELPERS
  - name: cookie
    args:
      - name: COOKIE
    help: Set the cookie used to talk to a hosted Jira instance
    script: jiraCookie '{{args.COOKIE}}'
  - name: test
    help: prints out Jira-related env vars avaialable during run
    script: |
      env | grep 'JIRA'
  - name: args_example
    script: |
      echo "I actually have no args... {{args}}, or options {{options}}"
END

