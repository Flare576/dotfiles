#!/bin/zsh
issueFile="${HOME}/.jira.d/.jira.issue"
echo "ISSUE_FILE: ${issueFile}"
read issue < ${issueFile}
echo "issue: ${issue}"

echo "endpoint: ${JIRA_S_ENDPOINT}"
echo "project: ${JIRA_S_PROJECT}"
echo "login: ${JIRA_S_LOGIN}"
echo "user: ${JIRA_S_USER}"
echo "API_TOKEN: ${JIRA_API_TOKEN}"
echo "PREFIX: ${JIRA_S_PREFIX}"
if [ -n "$(command -v bat)" ] ; then 
  viewer="bat"
else
  viewer="cat"
fi

cat<<END
custom-commands:
  - name: workon
    help: Sets the global "worked on" issue. To clear, call with empty string ""
    args:
      - name: ISSUE
    script: |-
      echo "{{args.ISSUE}}" > "\${JIRA_ISSUE_FILE}"
  - name: i
    help: Displays the global "worked on"  issue
    script: echo \${JIRA_ISSUE}
  - name: git
    help: Creates a new Git branch with the Jira prefix/issue and, if provided, branch
    args:
      - name: BRANCH
    script: |-
      git checkout -b \${JIRA_PREFIX}/\${JIRA_ISSUE}{{if args.BRANCH}}-{{args.BRANCH}}{{end}}
# FIND WORK
  - name: mine
    help: display issues assigned to me
    args:
      - name: PROJECT
        default: \$JIRA_PROJECT
    script: |-
      {{jira}} list -t ISuStRA --query "resolution = unresolved and assignee=currentuser() ORDER BY created"
  - name: sprint
    aliases: ['s']
    help: shows stories in curent sprint
    args:
      - name: PROJECT
        default: \$JIRA_PROJECT
    options:
      - name: text
        short: t
    script: |-
      {{jira}} list -t ISuStRA --query "sprint IN openSprints() and project={{args.PROJECT}}{{if options.text}} and text ~ \"{{options.text}}\"{{end}} ORDER BY status,assignee"
  - name: link
    help: Puts the link for JIRA_ISSUE in your clipboard if no ISSUE is provided
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      printf "${JIRA_S_ENDPOINT}browse/{{args.ISSUE}}" | pbcopy
  - name: chrome
    help: brings the JIRA_ISSUE up in the browser if no ISSUE is provided
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      {{jira}} view -b {{args.ISSUE}}
  - name: v
    help: views current JIRA_ISSUE if no ISSUE is provided
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      {{jira}} view -t customView {{args.ISSUE}} | $viewer
# DO WORK
  - name: g
    help: actually takes the story
    args: 
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      {{jira}} assign {{args.ISSUE}} \$JIRA_USER
      {{jira}} trans "In Progress" {{args.ISSUE}}
  - name: qa
    help: Assigns the story to you, moves it to QA, and brings up details
    args: 
       - name: ISSUE
         default: \$JIRA_ISSUE
    script: |
      {{jira}} trans "QA" {{args.ISSUE}}
      {{jira}} v {{args.ISSUE}} 
  - name: r
    help: Open a comment with the template then move to signoff
    args:
      - name: STATUS
        default: "Sign Off"
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      {{jira}} comment -m "h1. Testing Session 
      
      h2. Acceptance Criteria 
      
      h2. Edge Cases 
      
      h2. Regression Testing 
      
      h2. Look and Feel" {{args.ISSUE}}
      {{jira}} trans "{{args.STATUS}}" {{args.ISSUE}}
  - name: e
    help: edits current JIRA_ISSUE if no ISSUE is provided
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      {{jira}} edit {{args.ISSUE}}
  - name: c
    help: comments on current JIRA_ISSUE if no ISSUE is provided
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    options:
      - name: comment
        short: m
    script: |
      {{jira}} comment{{if options.comment}} -m "{{options.comment}}"{{end}} {{args.ISSUE}}
  - name: ts
    help: Lists the transitions for the JIRA_ISSUE if no ISSUE is provied
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      {{jira}} transitions {{args.ISSUE}}
  - name: t
    help: transitions the current JIRA_ISSUE if no ISSUE is provided
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    options:
      - name: state
        short: s
        required: true
      - name: comment
        short: m
    script: |
      {{jira}} trans{{if options.comment}} -m "{{options.comment}}"{{end}} "{{options.state}}" {{args.ISSUE}}
  - name: p
    help: Moves story to "PR Review"
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    script: |
      {{jira}} trans "PR Review" {{args.ISSUE}}
  - name: d
    help: Moves story to "Ready for QA" or provided state
    args:
      - name: ISSUE
        default: \$JIRA_ISSUE
    options:
      - name: comment
        short: m
      - name: state
        short: s
        default: "Ready for QA"
    script: |
      {{jira}} trans{{if options.comment}} -m "{{options.comment}}"{{end}} "{{options.state}}" {{args.ISSUE}}
# HELPERS
  - name: test
    help: prints out Jira-related env vars avaialable during run
    script: |
      env | grep 'JIRA'
END

