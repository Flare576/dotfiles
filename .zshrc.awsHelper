# AWS Params
# AWS_ADFS_HOST=""
# AWS_MAIN_PROFILE=""
# AWS_DOCKER_PROFILE=""
# AWS_DOCKER_SERVER=""
# AWS_ROLE_ARN=""

# Login to AWS ADFS
awslogin () {
  if [[ "$1" == *"h"* ]]; then
    echo "$(basename "$0") [AWS_PROFILE]"
    return 0
  fi
  [ -z "$1" ] && PROFILE="master"  || PROFILE="$1"
  aws-adfs login --profile=$PROFILE --adfs-host=$AWS_ADFS_HOST --ssl-verification --session-duration 14400 --no-sspi
}

# Auth w/ Docker via AWS
awsdocker () {
  if [[ "$1" == *"h"* ]]; then
    echo "$(basename "$0") You must have AWS_DOCKER_PROFILE and AWS_DOCKER_SERVER set"
    return 0
  fi
  aws ecr get-login-password --profile="$AWS_DOCKER_PROFILE" | docker login --username AWS --password-stdin "$AWS_DOCKER_SERVER"}

# Get Secrets
# Note: Set $AWS_PROFILE to avoid second arg: try `asp` from the "aws" oh-my-zsh plugin!
awssecret () {
  if [[ "$1" == *"h"* ]]; then
    echo "$(basename "$0") AWS_SECRET_NAME [AWS_PROFILE]]"
    return 0
  fi
  if [ -z "$1" ]; then
    echo "Gotta tell me what secret you want"
    return 1
  fi
  [ -z "$2" ] && PROFILE="$AWS_PROFILE"  || PROFILE="$2"
  aws secretsmanager get-secret-value --profile "$PROFILE" --secret-id "$1"
}

awsparameter () {
  if [[ "$1" == *"h"* ]]; then
    echo "$(basename "$0") AWS_PARAMETER_NAME [AWS_PROFILE]]"
    return 0
  fi
  if [ -z "$1" ]; then
    echo "Gotta tell me what parameter you want"
    return 1
  fi
  [ -z "$2" ] && PROFILE="$AWS_PROFILE"  || PROFILE="$2"
  aws ssm get-parameter --profile "$PROFILE" --name "$1" --query 'Parameter.Value' --output text
}

# Get Keys
awskeys () {
  if [[ "$1" == *"h"* ]]; then
    echo "$(basename "$0") [ARN [SESSION_NAME]]"
    return 0
  fi
  [ -z "$1" ] && ARN="$AWS_ROLE_ARN"  || ARN="$1"
  [ -z "$2" ] && SESSION_NAME="personal"  || SESSION_NAME="$2"
  aws sts assume-role --role-arn $ARN --role-session-name "$SESSION_NAME" --profile "$AWS_MAIN_PROFILE"
}

# Get job states
awsjobs () {
  jobs=(
    PDLA-LearningManagementOEX-LMS-ServiceDevelopmentPipeline
    PDLA-LearningManagementOEX-CMS-ServiceDevelopmentPipeline
    PDLA-LearningManagementOEX-RDSRDSDBDevelopmentPipeline
    PDLA-LearningManagementOEXSharedInfraDevelopmentPipeline
    PDLA-LearningManagementOEX-MongoDBDevelopmentPipeline
    S3DevelopmentPipeline-ngp-pdla-oex-s3
    PDLA-LearningManagementOEX-LMS-ServiceMasterPipeline
    PDLA-LearningManagementOEX-CMS-ServiceMasterPipeline
    PDLA-LearningManagementOEX-RDSRDSDBMasterPipeline
    PDLA-LearningManagementOEXSharedInfraMasterPipeline
    PDLA-LearningManagementOEX-MongoDBMasterPipeline
    S3MainPipeline-ngp-pdla-oex-s3
  )

  for job in "${jobs[@]}"
  do
    latestNonSuccessful=$(
      aws codepipeline get-pipeline-state --profile=shared --name="${job}" --output=json \
        | jq '[.stageStates[] | select( .latestExecution.status != "Succeeded")][0] | try [.actionStates[] | select( .latestExecution.status != "Succeeded")][0] |"[35m\(.actionName)[0m \(.latestExecution.status) (\( if .latestExecution.lastStatusChange then .latestExecution.lastStatusChange | split(".")| { offset: (.[1][6:9] | tonumber), sec: (.[0] + "Z" | fromdate) } | now - .sec + ((.offset + 1) * 60 * 60) | (. / 60 | floor | tostring) + "m" + (. % 60 | tostring) + "s" else "" end))"'
  )
    latestNonSuccessful="${latestNonSuccessful%\"}"
    latestNonSuccessful="${latestNonSuccessful#\"}"
    tput el
    if [ -z "$latestNonSuccessful" ]; then
      print -P -- "‚úÖ $BG[040]$FG[000]$job[0m"
    elif [[ "$latestNonSuccessful" == *"Failed"* ]]; then
      print -P -- "‚ùå $BG[009]$FG[000]$job[0m: $latestNonSuccessful"
    else
      print -P -- "‚õ¥  $BG[226]$FG[000]$job[0m: $latestNonSuccessful"
    fi
  done
}

monitorjobs () {
  clear
  while true;
  do
    tput sc
    awsjobs
    sleep 20
    tput rc
  done
}
