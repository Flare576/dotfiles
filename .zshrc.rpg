# Fun RPG-CLI integrations
alias rpg=rpg-cli
alias quest="jq -r '.tombstones | keys_unsorted | first' ~/.rpg/data"
alias quest_ez="jq -r '.tombstones | keys | sort_by(length) | first' ~/.rpg/data"
alias quests="jq -r '.tombstones | keys_unsorted | length' ~/.rpg/data"
alias seen="jq -r '.inspected | length' ~/.rpg/data"
alias clean_investigated="jq '.inspected = []' ~/.rpg/data > /tmp/cleanup; cp /tmp/cleanup ~/.rpg/data"
function playself() {
  for i in `seq 1 1`; do
    while [ $(quests) -lt 300 ]; do
      print -n "\rHeaded to level 6   "
      grind 100 6 > /dev/null

      print -n "\rHeaded to level 4   "
      grind 100 4 > /dev/null

      print "\rQuest Count: $(quests)    "
    done
    echo "questing"
    while [ $(quests) -gt 50 ]; do
      print "\rQuest Count: $(quests)    "
      for i in `seq 1 25`; do
        questmap > /dev/null
      done
      rpg-cli
    done
    while [ $(quests) -gt 0 ]; do
      questmap > /dev/null
    done
    for i in `seq 1 400`; do
      rpg-cli use potion &> /dev/null
    done
    rpg-cli
  done
  rpg-cli class mage
  grind 100 6 | grep -e "ðŸ“¦" -e "ðŸ’€" -e "rng" -e "level"
  grind 100 4 | grep -e "ðŸ“¦" -e "ðŸ’€" -e "rng" -e "level"
  rpg-cli
  while [ $(quests) -gt 0 ]; do
    questmap > /dev/null
    use_stones 5
  done
  rpg-cli
  use_stones 500
  rpg-cli

}
function questmap() {
  myquest=$(quest_ez)
  full="$HOME/${myquest:2}"
  mkdir -p $full
  deep=$(basename $full)
  echo "$full"

  if [ -z "$1" ]; then
    quest=${${myquest:2}%%/*}
    cd $quest
    while [ -n "$(ls)" ]; do
      dn
    done

    number_re='^[0-9]+$'
    if [[ $deep =~ $number_re ]]; then
      for i in `seq 0 $deep`; do
        cd
      done
    fi
    cd;cd;cd
    rm -rf $quest
  fi
}

function zz() {
  dest=$(_z -e "$@" 2>&1)
  rpg-cli cd "$dest"
  cd "$(rpg-cli pwd)"
}
function ls() {
  # don't do if no rpg-cli like on ubuntu images
  if command -v rpg-cli &> /dev/null; then
    # You're here isn't psychic, they only get to look in the current dir...
    rpg-cli ls
  fi
  # but you are a dev, so I guess you can run normal command with params
  command ls $@
}
# if something is on fire, don't forget about the -f flag for the RPG thing
function cd() {
  # don't do if no rpg-cli like on ubuntu images
  if command -v rpg-cli &> /dev/null; then
    rpg-cli cd "$@"
    builtin cd "$(rpg-cli pwd)"
  else
    builtin cd $@
  fi
}
function check_burn() {
  if [[ "$1" == *"ðŸ”¥"* ]]; then
    echo "saving from burn"
    rpg use remedy
  elif [[ "$1" == *"poison"* ]]; then
    echo "saving from poison"
    rpg use remedy
  fi
}

function grind2() {
  # todo: if not in ~, should remember origin folder and use potions/ethers each outer loop (optionally)
  [ -n "$1" ] && iterations=$1 || iterations=10
  [ -n "$2" ] && depth=$2 || depth=2
  for i in `seq 1 $iterations`; do
    fol="quest2_"$RANDOM
    mkdir $fol
    cd $fol
    ls
    for i in `seq 0 $depth`; do
      dn | tee /tmp/catmeow
      check_burn "$(</tmp/catmeow)"
      cd $(rpg pwd)
    done
    for i in `seq -1 $depth`; do
      cd | tee /tmp/catmeow
      check_burn "$(</tmp/catmeow)"
      cd $(rpg pwd)
    done
    rm -rf $fol
  done
}
function grind() {
  # todo: if not in ~, should remember origin folder and use potions/ethers each outer loop (optionally)
  [ -n "$1" ] && iterations=$1 || iterations=10
  [ -n "$2" ] && depth=$2 || depth=2
  for i in `seq 1 $iterations`; do
    fol="quest"$RANDOM"_"$RANDOM
    mkdir $fol
    cd $fol
    ls
    for i in `seq 0 $depth`; do
      dn
    done
    for i in `seq -1 $depth`; do
      cd
    done
    rm -rf $fol
  done
}
function rb() {
  [ -n "$1" ] && fights="$1" || fights=1
  for i in `seq 1 $fights`; do
    rpg-cli battle
  done
}
function use_stones() {
  [ -n "$1" ] && qty="$1" || qty=100
  for i in `seq 1 $qty`; do
    rpg-cli use hp-stone > /dev/null
    rpg-cli use mp-stone > /dev/null
    rpg-cli use spd-stone > /dev/null
    rpg-cli use str-stone > /dev/null
  done
}
function rup() {
  [ -n "$1" ] && qty="$1" || qty=1
  for i in `seq 1 $qty`; do
    rpg-cli use potion
  done
}
function re() {
  [ -n "$1" ] && qty="$1" || qty=1
  for i in `seq 1 $qty`; do
    rpg-cli use escape
  done
  builtin cd ~
}
# make a new dungeon!! https://github.com/facundoolano/rpg-cli/blob/main/shell/README.md#arbitrary-dungeon-levels
function dn() {
    current=$(basename $PWD)
    number_re='^[0-9]+$'

    if [[ $current =~ $number_re ]]; then
        next=$(($current + 1))
        command mkdir -p $next && cd $next && rpg ls
    elif [[ -d 1 ]] ; then
        cd 1 && rpg ls
    else
        command mkdir -p dungeon/1 && cd dungeon && rpg ls
    fi
}
# End RPG-cli integrations

