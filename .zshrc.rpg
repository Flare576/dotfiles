# Fun RPG-CLI integrations
alias rpg=rpg-cli
alias quest="jq -r '.tombstones | keys_unsorted | first' ~/.rpg/data"
alias quest_ez="jq -r '.tombstones | keys | sort_by(split(\"/\") | length) | first' ~/.rpg/data"
alias quests="jq -r '.tombstones | keys_unsorted | length' ~/.rpg/data"
alias seen="jq -r '.inspected | length' ~/.rpg/data"
alias clean_investigated="jq '.inspected = []' ~/.rpg/data > /tmp/cleanup; cp /tmp/cleanup ~/.rpg/data"

function seed_dungeon() {
  [ -n "$1" ] && qty="$1" || qty=1000
  while [ $(quests) -lt $qty ]; do
    print -n "\rHeaded to level 4   "
    grind 100 4 > /dev/null

    print -n "\rHeaded to level 6   "
    grind 100 6 > /dev/null

    print "\rQuest Count: $(quests)    "
  done
  cp ~/.rpg/data ~/.rpg/seeded
}

function gear_up() {
  rpg-cli use escape > /dev/null
  rpg-cli buy shield
  rpg-cli buy sword
}


function playself() {
  seed_dungeon 3000
  echo "Level up Thief"
  rpg-cli class thief
  grind 50 1 | grep -e "ðŸ’€" -e "level"
  echo "Prepping a Mage"
  rpg-cli class mage
  # grind 10 6 | grep -e "ðŸ“¦" -e "ðŸ’€" -e "rng" -e "level"
  echo "[31mKill old mage[0m"
  grind 10 6 | grep -e "ðŸ’€" -e "level"
  echo "[31mTry to get a healthy mage to floor 1[0m"
  grind 100 1 | grep -e "ðŸ’€" -e "level"
  gear_up
  echo "[31mTry to get a healthy mage to floor 2[0m"
  grind 100 2 | grep -e "ðŸ’€" -e "level"
  gear_up
  echo "[31mTry to get a healthy mage to floor 3[0m"
  grind 100 3 | grep -e "ðŸ’€" -e "level"
  gear_up
  echo "[31mTry to get a healthy mage to floor 4[0m"
  grind 25 4 | grep -e "ðŸ’€" -e "level"
  gear_up
  rpg-cli
  rm -rf dungeon
  echo "questing"
  while [ $(quests) -gt 1500 ]; do
    inn 25
    rpg-cli
  done
  gear_up
  while [ $(quests) -gt 0 ]; do
    inn 25
    rpg-cli
  done
  rpg-cli use double-rng
  rpg-cli use spd-rng
  # start grinding on floor 10
  blood_bath 10 10
  for i in `seq 1 100`; do
    rpg-cli use lvl-stone > /dev/null
  done
  gear_up
  blood_bath 50 20
  gear_up
  # maybe buy ethers?
  blood_bath 70 20
  gear_up
  for i in `seq 1 99`; do
    dn > /dev/null
  done
  rpg-cli use double-rng
  rpg-cli use ruling-rng
  fight_with "gorthaur"
  rpg-cli use ruling-rng
  rpg-cli use double-rng
  gear_up
  rpg-cli buy diamond-ring
  fight_with "shadow"
  cd .rpg
  fight_with "dev"
  rpg-cli todo
}

function fight_with() {
  result=""
  while [ -z "$result" ]; do
    fight="$(rb)"
    result="$(rb | grep -e "$1")"
  done
}

function blood_bath() {
  start=$1
  floors=$2
  for i in `seq 2 $start`; do
    dn > /dev/null
  done
  for i in `seq 1 $floors`; do
    dn > /dev/null
    rpg-cli
    rb 1000 | grep -e "ðŸ’€" -e "level" 
  done
}

function inn() {
  [ -n "$1" ] && qty="$1" || qty=50
  for i in `seq 1 $qty`; do
    if [ $(quests) -gt 0 ]; then
      quest_ez
      questmap | grep -e "ðŸ“¦" -e "ðŸ’€" -e "rng" -e "level" -e "ðŸª¦"
      use_stones 2
    else
      echo "No more quests, adventurer"
      break
    fi
  done
  echo "$(quests) quests left"
}

function questmap() {
  myquest=$(quest_ez)
  full="$HOME/${myquest:2}"
  mkdir -p $full
  deep=$(basename $full)
  echo "$full"

  if [ -z "$1" ]; then
    quest=${${myquest:2}%%/*}
    cd $quest
    while [ -n "$(ls)" ]; do
      dn
    done

    number_re='^[0-9]+$'
    if [[ $deep =~ $number_re ]]; then
      for i in `seq 0 $deep`; do
        cd
      done
    fi
    cd;cd;cd
    rm -rf $quest
  fi
}

function zz() {
  dest=$(_z -e "$@" 2>&1)
  rpg-cli cd "$dest"
  cd "$(rpg-cli pwd)"
}
function ls() {
  # don't do if no rpg-cli like on ubuntu images
  if command -v rpg-cli &> /dev/null; then
    # You're here isn't psychic, they only get to look in the current dir...
    rpg-cli ls
  fi
  # but you are a dev, so I guess you can run normal command with params
  command ls $@
}
# if something is on fire, don't forget about the -f flag for the RPG thing
function cd() {
  # don't do if no rpg-cli like on ubuntu images
  if command -v rpg-cli &> /dev/null; then
    rpg-cli cd "$@"
    builtin cd "$(rpg-cli pwd)"
  else
    builtin cd $@
  fi
}
function check_burn() {
  if [[ "$1" == *"ðŸ”¥"* ]]; then
    echo "saving from burn"
    rpg use remedy
  elif [[ "$1" == *"poison"* ]]; then
    echo "saving from poison"
    rpg use remedy
  fi
}

function grind2() {
  # todo: if not in ~, should remember origin folder and use potions/ethers each outer loop (optionally)
  [ -n "$1" ] && iterations=$1 || iterations=10
  [ -n "$2" ] && depth=$2 || depth=2
  for i in `seq 1 $iterations`; do
    fol="quest2_"$RANDOM
    mkdir $fol
    cd $fol
    ls
    for i in `seq 0 $depth`; do
      dn | tee /tmp/catmeow
      check_burn "$(</tmp/catmeow)"
      cd $(rpg pwd)
    done
    for i in `seq -1 $depth`; do
      cd | tee /tmp/catmeow
      check_burn "$(</tmp/catmeow)"
      cd $(rpg pwd)
    done
    rm -rf $fol
  done
}
function grind() {
  # todo: if not in ~, should remember origin folder and use potions/ethers each outer loop (optionally)
  [ -n "$1" ] && iterations=$1 || iterations=10
  [ -n "$2" ] && depth=$2 || depth=2
  for i in `seq 1 $iterations`; do
    fol="quest"$RANDOM"_"$RANDOM
    mkdir $fol
    cd $fol
    ls
    for i in `seq 0 $depth`; do
      dn
    done
    for i in `seq -1 $depth`; do
      cd
    done
    rm -rf $fol
  done
}
function rb() {
  [ -n "$1" ] && fights="$1" || fights=1
  for i in `seq 1 $fights`; do
    rpg-cli battle
  done
}
function use_stones() {
  [ -n "$1" ] && qty="$1" || qty=100
  for i in `seq 1 $qty`; do
    rpg-cli use hp-stone > /dev/null
    rpg-cli use mp-stone > /dev/null
    rpg-cli use spd-stone > /dev/null
    rpg-cli use str-stone > /dev/null
  done
}
function rup() {
  [ -n "$1" ] && qty="$1" || qty=1
  for i in `seq 1 $qty`; do
    rpg-cli use potion
  done
}
function re() {
  [ -n "$1" ] && qty="$1" || qty=1
  for i in `seq 1 $qty`; do
    rpg-cli use escape
  done
  builtin cd ~
}
# make a new dungeon!! https://github.com/facundoolano/rpg-cli/blob/main/shell/README.md#arbitrary-dungeon-levels
function dn() {
    current=$(basename $PWD)
    number_re='^[0-9]+$'

    if [[ $current =~ $number_re ]]; then
        next=$(($current + 1))
        command mkdir -p $next && cd $next && rpg ls
    elif [[ -d 1 ]] ; then
        cd 1 && rpg ls
    else
        command mkdir -p dungeon/1 && cd dungeon && rpg ls
    fi
}
# End RPG-cli integrations

function count_stones() {
  [ -z "$1" ] && file="$HOME/.rpg/seeded" || file="$1"
  for type in Level Power Health Magic Speed; do
    qty=$(jq -r ".tombstones" $file | grep -e "$type" | wc -l)
    echo "$type: $qty"
  done
}

